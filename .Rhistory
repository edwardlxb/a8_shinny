data<- iris
hist(data$Sepal.Length
)
output$main_plot <- renderPlot({
hist(data$Sepal.Length,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
xlab = "Sepal Length",
main = "Iris dataset")
})
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(2, 4, 6, 8, 10, 12, 14, 16),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = list(c(2, 4, 6, 8, 10, 12, 14, 16)),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
selectInput(input = "n_breaks",
choices = list(2, 4, 6, 8, 10, 12, 14, 16),
selected = 2),
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = list(2, 4, 6, 8, 10, 12, 14, 16),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
label = list(2, 4, 6, 8, 10, 12, 14, 16),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
label = c(2, 4, 6, 8, 10, 12, 14, 16),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
label = (2, 4, 6, 8, 10, 12, 14, 16),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
label = [1,10],
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
label = c(1,2,3),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
label = c(1,2,3),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(1,2,3),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(1,2,3),
label = list("what","is","this"),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
shiny::runApp()
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(1,2,3),
label = list("Sepal Length"),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
shiny::runApp()
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(1,2,3),
label = list("Sepal Length"),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
shiny::runApp()
shiny::runApp()
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(1,2,3),
label = list("Sepal Length"),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "1000px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
shiny::runApp()
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(1,2,3,4,5,6,7,8,9,10),
label = list("Sepal Length"),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "1000px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
shiny::runApp()
library(shiny)
library(plotly)
library(dplyr)
data<- iris
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
hist(data$Sepal.Length,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
colors = red
xlab = "Sepal Length",
main = "Iris dataset")
if (input$Sepal_length) {
rug(data$Sepal.Length)
}
if (input$density) {
dens <- density(data$Sepal.Length,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
})
library(shiny)
library(plotly)
library(dplyr)
data<- iris
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
hist(data$Sepal.Length,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
colors = red,
xlab = "Sepal Length",
main = "Iris dataset")
if (input$Sepal_length) {
rug(data$Sepal.Length)
}
if (input$density) {
dens <- density(data$Sepal.Length,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
})
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(1,2,3,4,5,6,7,8,9,10),
label = list("Sepal Length"),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "1000px"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
shiny::runApp()
library(shiny)
library(plotly)
library(dplyr)
data<- iris
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
hist(data$Sepal.Length,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
colors = "red",
xlab = "Sepal Length",
main = "Iris dataset")
if (input$Sepal_length) {
rug(data$Sepal.Length)
}
if (input$density) {
dens <- density(data$Sepal.Length,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
})
shiny::runApp()
library(shiny)
library(plotly)
library(dplyr)
data<- iris
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
hist(data$Sepal.Length,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
colors = c("red", "yellow", "green", "violet", "orange",
"blue", "pink", "cyan"),
xlab = "Sepal Length",
main = "Iris dataset")
if (input$Sepal_length) {
rug(data$Sepal.Length)
}
if (input$density) {
dens <- density(data$Sepal.Length,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
})
shiny::runApp()
shiny::runApp()
library(shiny)
library(plotly)
library(dplyr)
data<- iris
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
hist(data$Sepal.Length,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
col = c("red", "yellow", "green", "violet", "orange",
+   "blue", "pink", "cyan")
xlab = "Sepal Length",
main = "Iris dataset")
if (input$Sepal_length) {
rug(data$Sepal.Length)
}
if (input$density) {
dens <- density(data$Sepal.Length,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
})
library(shiny)
library(plotly)
library(dplyr)
data<- iris
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
hist(data$Sepal.Length,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
col = c("red", "yellow", "green", "violet", "orange",
"blue", "pink", "cyan"),
xlab = "Sepal Length",
main = "Iris dataset")
if (input$Sepal_length) {
rug(data$Sepal.Length)
}
if (input$density) {
dens <- density(data$Sepal.Length,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
})
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot_ly(data$Sepal.Length,
type = "histogram"
probability = TRUE,
breaks = as.numeric(input$n_breaks),
col = c("red", "yellow", "green", "violet", "orange",
"blue", "pink", "cyan"),
xlab = "Sepal Length",
main = "Iris dataset")
plot_ly(data$Sepal.Length,
type = "histogram",
probability = TRUE,
breaks = as.numeric(input$n_breaks),
col = c("red", "yellow", "green", "violet", "orange",
"blue", "pink", "cyan"),
xlab = "Sepal Length",
main = "Iris dataset")
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/rsconnect')
secret='<SECRET>')
rsconnect::setAccountInfo(name='info498-xinbo',
token='66585C4EFA7085BBFD6252A087F4749D',
secret='<SECRET>')
secret='7o3DcmNBW+mwOJMbUiBAWzJOQ5ReAcdE0hWlQm7z')
rsconnect::setAccountInfo(name='info498-xinbo',
token='66585C4EFA7085BBFD6252A087F4749D',
secret='7o3DcmNBW+mwOJMbUiBAWzJOQ5ReAcdE0hWlQm7z')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('/Users/Edward/Documents/INFO_a8')
shiny::runApp()
